<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>The Abyss</title><description>Coding&amp;chill</description><link>http://localhost:2368/</link><generator>Ghost 0.11</generator><lastBuildDate>Fri, 20 Jan 2017 20:56:38 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Go with a Flow</title><description>&lt;p&gt;You've heard about Flow, but not sure what it is, how to use it and whether it's worth it? I had to find answers to this questions so hopefully you don't have to. I've started with Flow as a contributor to already an established project with extensive (and ever growing)&lt;/p&gt;</description><link>http://localhost:2368/go-with-a-flow/</link><guid isPermaLink="false">75e9ed39-eef9-4b2a-8f49-c4b78014c47b</guid><category>javascript</category><category>cs</category><dc:creator>Elvina Valieva</dc:creator><pubDate>Wed, 18 Jan 2017 21:26:09 GMT</pubDate><media:content url="http://localhost:2368/content/images/2017/01/flow-hero-logo.png" medium="image"/><content:encoded>&lt;img src="http://localhost:2368/content/images/2017/01/flow-hero-logo.png" alt="Go with a Flow"&gt;&lt;p&gt;You've heard about Flow, but not sure what it is, how to use it and whether it's worth it? I had to find answers to this questions so hopefully you don't have to. I've started with Flow as a contributor to already an established project with extensive (and ever growing) Flow coverage. It was a stark contrast to how JavaScript's usual treatment of types, in fact it seemed formalistic and unnecessarily specific at times. However, just like with writing tests, well type-annotated code will take care of itself and let you know about a problem &lt;em&gt;before&lt;/em&gt; things went wrong.&lt;/p&gt;

&lt;h3 id="whyuseflow"&gt;Why use Flow?&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://flowtype.org"&gt;Flow&lt;/a&gt; allows strict typing in JavaScript. That is really not at all helpful, so I'll try again. Lets look at the following code. &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var foo = 0; //here is a number  
var bar = '0'; //here is a string  
foo == bar //true but why?  
foo === bar //false as it should be  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So why exactly &lt;code&gt;==&lt;/code&gt; equates values of two very different types? It happens because of a concept called &lt;em&gt;coercion&lt;/em&gt;. When using &lt;code&gt;==&lt;/code&gt; we ask JS to compare values but not type so types are converted in case they don't match, &lt;code&gt;===&lt;/code&gt; on the other hand compares both values and types. That's what coercion is. Of course we may want values to be converted into different type, that is a so-called explicit coercion.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var wasNumber = 42;  
var nowString = number.toString();  
nowString //'42'  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let's take a look at implicit coercion in action.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var x = 2; //totally a number  
var y = '2'; //not a number  
van z = x*y;  
z // prints 4... wait what?  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So this kind of things can sneak up on you and they are a real pain to debug. Javascript is &lt;em&gt;dynamically typed&lt;/em&gt; language which we can define as a language that will let you know that &lt;code&gt;'X' is not a function&lt;/code&gt; only when the program is running (or &lt;em&gt;runtime&lt;/em&gt;). But this is not true for every programming language. Some of the languages check type &lt;em&gt;statically&lt;/em&gt; or during &lt;em&gt;compile time&lt;/em&gt;, which means before the program is run.&lt;/p&gt;

&lt;p&gt;So Flow exists to allow static type checking in Javascript, it checks type as you work on the project. The least invasive way to use Flow is to allow Flow to use &lt;em&gt;type inference&lt;/em&gt; (automatic deduction of data type based on language syntax etc). You can also choose to be very specific about each variable, function argument and returned type. This of course depends on the project and your own approach to development. &lt;/p&gt;

&lt;p&gt;Static type checking is not inherently better than dynamic one, in fact there are a lot of opinions about those two.  You may want to read &lt;a href="https://medium.com/@preethikasireddy/why-use-static-types-in-javascript-part-2-part-3-be699ee7be60#.54u3hgr3d"&gt;this post&lt;/a&gt; if you still not sure whether you need to learn Flow.&lt;/p&gt;

&lt;h3 id="howtostart"&gt;How to start?&lt;/h3&gt;

&lt;p&gt;Like this &lt;code&gt;\\@flow&lt;/code&gt;. Just add this comment at the top of the file after &lt;a href="https://flowtype.org/docs/getting-started.html#_"&gt;installing&lt;/a&gt; and that's it. Use &lt;code&gt;/* @flow weak */&lt;/code&gt; if you only want to be notified about mismatch and don't want to work on type annotation or if you have existing code base, which you want to gradually refactor using Flow. &lt;br&gt;
You can decide between periodically running &lt;code&gt;flow check&lt;/code&gt; from console and starting a &lt;a href="https://flowtype.org/docs/new-project.html#using-the-flow-server"&gt;server&lt;/a&gt;, which will watch changes in your source files and will detect any errors and inconsistent type usage.&lt;/p&gt;

&lt;h3 id="syntaxintro"&gt;Syntax Intro&lt;/h3&gt;

&lt;p&gt;While the flexibility is a strength of Flow, one of it's most obvious weaknesses is far from ideal docs. I refer to this detailed &lt;a href="https://medium.freecodecamp.com/why-use-static-types-in-javascript-part-1-8382da1e0adb#.ax9so8iyn"&gt;post&lt;/a&gt; in case you want an in depth information about flow syntax. For now let's start with js primitive types using a cat as an example.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var name: string = 'Fluffy';  
var age: number = 3;  
var likesDogs: boolean = false;  
var currentThoughts: void = undefined;  
var likesRoomba: null = null;  
var foodPreferences: any = 'tuna';  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First thing you may notice is that despite &lt;code&gt;undefined === null&lt;/code&gt; Flow separates those two types. Apart from that this syntax seems easily readable. &lt;code&gt;any&lt;/code&gt; type basiacally means Flow will skip checking this variable, which may be a very good thing or a very bad thing, so it should be used with caution. &lt;br&gt;
Now let's move to arrays, which flows describes as types of array elements like &lt;code&gt;Array&amp;lt;type&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var favouriteToys: Array&amp;lt;string&amp;gt; = ['mouse', 'birdie', 'socks', 'human toes'];  
//alternative syntax
var favouriteStarTrekTNGCharacters: string[] = ['Spot'];  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Object types can be defined both very loosely and very detailed.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;vat obj: Object = {};  
let cat: {name: string, age: number, likesDogs: boolean} = {name: 'Fluffy', age: 3, likesDogs: false};  
//object can be a registry of all cats in the neighbourhood
let catRating: {[name:string]: number} = {};  
catRating["Fluffy"] = 10;  
//Fluffy is a solid ten
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most interesting and complicated syntax concerns functions. &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var aFunction: Function = () =&amp;gt; {console.log('called');};  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Function is of course a type in Flow, but Flow is smart enough to find out what is a function by itself. You can annotate function very specifically, including arguments and returning type.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;function sum(a: number, b: number): number {  
  return a+b;
}

async function asyncEquate(  
  remoteNumber: Promise&amp;lt;number[]&amp;gt;,
  localNumber: number,
): Promise&amp;lt;boolean&amp;gt; {
  var firstNumber = await remoteNumber;
  return firstNumber === localNumber;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Flow allows you to define your own types, and it is the most powerful feature, which can become a way for contributors to easily grasp how things work in you project.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;type Cat = {  
  name: string,
  age: number,
  likesDogs: boolean,
};

function addCat(  
  {
   name, age, likesDogs = false,
  }: Cat
): void {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example function only accepts this type as an argument and one of the parameters has a default value. Types can be strict this way only object structured certain way would be accepted&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;type Cat = {|  
  name: string,
  age: number,
  likesDogs: boolean,
|};
//note the use of '|'

addCat({  
  name: 'Spot',
  age: 5,
  likesDogs: true,
  furColor: 'black and white',
});
//This will cause an error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Last cool thing you need to know is how to make Flow more flexible with &lt;strong&gt;maybe&lt;/strong&gt; types and &lt;strong&gt;disjointed unions&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;type Cat = {|  
  name: ?string, //only house cats have names
  age: ?number, //cats rarely remember their birthdays
  likesDogs: boolean,
|};

addCat({  
  name: null,
  age: null,
  likesDogs: false,
});
//maybe values can be either a declared type or a null
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets make &lt;code&gt;addCat&lt;/code&gt; accept more than one type as an argument.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;function addCat(  
  {
   name, age, likesDogs = false,
  }: Cat | Array&amp;lt;Cat&amp;gt; 
): void {
  ...
}

addCat(  
  [{
    name: null, age: null, likesDogs: false,
  }, {
    name: 'Sylvester', age: 1, likesDogs: true,
  }]
);
//'|' (pipe) means more than one type is viable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find more detailed examples for classes, mixed types etc in the &lt;a href="https://flowtype.org/docs/quick-reference.html"&gt;docs&lt;/a&gt;. That's it for now, next I am going to explain how to check how read Flow error and how and why to increase Flow coverage in your project.&lt;/p&gt;</content:encoded></item><item><title>Notes from 33C3</title><description>&lt;h3 id="incaseyoudontknow"&gt;In case you don't know&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.ccc.de"&gt;Chaos Computer Congress&lt;/a&gt; is the biggest thing. It's THE THING. In fact there are two types of people in the world: those who are planning to go to CCC and those who haven't heard of it yet. That time of the year between Christmas and&lt;/p&gt;</description><link>http://localhost:2368/notes-from-33c3/</link><guid isPermaLink="false">cc538fb3-10bc-4e3f-9f57-cdba0083566a</guid><category>conferences</category><dc:creator>Elvina Valieva</dc:creator><pubDate>Sun, 01 Jan 2017 19:24:04 GMT</pubDate><media:content url="http://localhost:2368/content/images/2017/01/33C3-hello.png" medium="image"/><content:encoded>&lt;h3 id="incaseyoudontknow"&gt;In case you don't know&lt;/h3&gt;

&lt;img src="http://localhost:2368/content/images/2017/01/33C3-hello.png" alt="Notes from 33C3"&gt;&lt;p&gt;&lt;a href="https://www.ccc.de"&gt;Chaos Computer Congress&lt;/a&gt; is the biggest thing. It's THE THING. In fact there are two types of people in the world: those who are planning to go to CCC and those who haven't heard of it yet. That time of the year between Christmas and New Year (when most german cities turn into ghost towns) when a bunch of interesting folks hang out together, listen to each other and make stuff under umbrella of the shared ideals and love for technology. It is almost like Star Trek, but in a convention centre and only for four days. In fact CCC often makes deliberate design choices like TNG era screen designs or creating a warp bubble on the assembly room. These people know what's what. And they are serious about what they do and in return are taken seriously by The Man.&lt;/p&gt;

&lt;h3 id="howwasit"&gt;How was it?&lt;/h3&gt;

&lt;p&gt;This year's CCC (or 33C3) is even bigger than usual, and pleases anyone who loves math. It happened so that my companion for the event was my partner, a person removed from tech, but he was tempted by promise of politics and space. When we entered the convention centre we both were overwhelmed. Within plethora of self-organised sessions and talks there was just too much to do. I can only imagine how dumbstruck my partner was at the time.&lt;/p&gt;

&lt;p&gt;But after seeing some familiar places and downloading the right app, we figured it out. And we had great time meeting cool people and learning stuff. It is very welcoming and accepting crowd. A safe space if you will. And they accommodated people with different needs and interests so well it might have been called Diversity: the conference. &lt;/p&gt;

&lt;p&gt;I think it is unnecessary to mention all the things we've done and seen as well as all the things in that were happening in the 3 days: CCC is HUGE. But I think its flexibility allows anyone to have their unique experience and have either a chill-out session, vigorous learning schedule or mixture of both.&lt;/p&gt;

&lt;p&gt;We happen to be visiting many political talks and some of them were wonderful (we got to see a live translation from Edward Snowden). Since CCC people are very so awesome, all the &lt;a href="https://media.ccc.de"&gt;videos&lt;/a&gt; were online just couple of hours after they've started and have variety of subtitles to choose from. If you have to choose one, I recommend funny and hopeful &lt;a href="https://media.ccc.de/v/33c3-8406-the_moon_and_european_space_exploration"&gt;talk&lt;/a&gt; by ESA Director General Johann-Dietrich Woerner (an the entirety of space track for that matter, that dark matter if you will). &lt;/p&gt;

&lt;p&gt;My biggest take away from CCC is how big my responsibility is. I've chosen to do this thing that I do and I might as well use it for something good. That is no rocket science of course, but that is something that feels right when you know that there are people who of that and people who will help you when you stumble and fall.&lt;/p&gt;

&lt;p&gt;My partner loved it and despite having no previous understanding of "these things" is shopping for some hardware to start making stuff, so don't be intimidated by this juggernaut. We are coming again, because being there feels like looking 20 years into the future.&lt;/p&gt;

&lt;h3 id="ashortodetohamburg"&gt;A short ode to Hamburg&lt;/h3&gt;

&lt;p&gt;Hamburg is great. The docks. St.Pauli. Canals. It feels opens and relaxed, a lot like Amsterdam. And it is really not that cold. 10/10!&lt;/p&gt;</content:encoded></item><item><title>Outreachy: Week 1&amp;2</title><description>&lt;p&gt;It has been 2 weeks since the beginning of Outreachy and I've started working with people of Mozilla's WebExtensions. So far it was just awesomesause. So here is a story of how it came to be.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://wiki.gnome.org/Outreachy/SpreadTheWord?action=AttachFile&amp;amp;do=get&amp;amp;target=outreachy-logo.png" alt="dfsdsd"&gt;&lt;/p&gt;

&lt;h3 id="whatisoutreachyanyway"&gt;What is Outreachy, anyway?&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://gnome.org/outreachy/"&gt;Outreachy&lt;/a&gt; is a scholarship program for underrepresented groups (LGBTQ+ people,&lt;/p&gt;</description><link>http://localhost:2368/outreachy-week-1-2/</link><guid isPermaLink="false">65b6a0b2-116b-49e9-80bf-d84dfe3be5f8</guid><category>javascript</category><category>outreachy</category><dc:creator>Elvina Valieva</dc:creator><pubDate>Sat, 17 Dec 2016 20:26:23 GMT</pubDate><media:content url="http://localhost:2368/content/images/2016/12/outreachy-logo.png" medium="image"/><content:encoded>&lt;img src="http://localhost:2368/content/images/2016/12/outreachy-logo.png" alt="Outreachy: Week 1&amp;2"&gt;&lt;p&gt;It has been 2 weeks since the beginning of Outreachy and I've started working with people of Mozilla's WebExtensions. So far it was just awesomesause. So here is a story of how it came to be.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://wiki.gnome.org/Outreachy/SpreadTheWord?action=AttachFile&amp;amp;do=get&amp;amp;target=outreachy-logo.png" alt="Outreachy: Week 1&amp;2"&gt;&lt;/p&gt;

&lt;h3 id="whatisoutreachyanyway"&gt;What is Outreachy, anyway?&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://gnome.org/outreachy/"&gt;Outreachy&lt;/a&gt; is a scholarship program for underrepresented groups (LGBTQ+ people, PoC and women) in open source software development. It is organised by nice people of &lt;a href="https://www.gnome.org/foundation/"&gt;GNOME Foundation&lt;/a&gt;, &lt;a href="https://sfconservancy.org"&gt;Software Freedom Conservancy&lt;/a&gt; and &lt;a href="https://www.redhat.com"&gt;Red Hat&lt;/a&gt;. &lt;a href="https://gnome.org/outreachy/#sponsors"&gt;Many-many cool companies&lt;/a&gt; support the program and work with the students.&lt;/p&gt;

&lt;h3 id="whyiveapplied"&gt;Why I've applied&lt;/h3&gt;

&lt;p&gt;To be completely honest I feel very privileged to be part of Outreachy and in general. I am 'white passing' person living in Europe, who already had received some perks from people in Tech who want to promote diversity. I am very grateful for this opportunity to work side-by-side with very experienced and accomplished developers. Learn from them, learn from my own mistakes, and most importantly write a lot of code. I hope this code will not only teach me a laundry list of things but will also allow other people to see what I am capable of. My dream is to continue writing open source code and contribute to project I think are important and to collaborate with people who share my values. And this three months I am going to do exactly that!&lt;/p&gt;

&lt;p&gt;I had wonderful experience with my initial commits, working with Kumar, who has been the supportive and helpful, despite my clumsy first pull request. I recommend anyone eligible to try their hand and contribute to the project they like the most just for fun and see where it goes from there. It may be scary (less scary if you look around the repo and see how maintainers treat contributors), but it is worth it 100%. &lt;/p&gt;

&lt;h3 id="oksowhatiswebextensions"&gt;Ok, so what is WebExtensions?&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/Add-ons/WebExtensions/What_are_WebExtensions"&gt;WebExtensions or web-ext&lt;/a&gt; is Mozilla's project to create a cross-browser system for add-on development. They try to make developer's life easier allowing to adapt add-on to Edge, Chrome, Opera and Firefox (naturally) with minimal changes. Lately I've been learning more and more about how chaotic and sometimes unreasonable the word of browser compatibility and specs is. Web-ext is an honest attempt to make all this suck less for add-on developers. This is a great and dynamic project, and they will be very happy to have &lt;a href="https://github.com/mozilla/web-ext"&gt;new contributors&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mozilla also gives away laptops to their students and in the light of some burned logic boards and being pretty broke this was most welcomed and unexpected. I should get me some stickers!&lt;/p&gt;

&lt;h3 id="andwhatareyouworkingonnow"&gt;And what are you working on now?&lt;/h3&gt;

&lt;p&gt;I've been working on two issues and started writing my own add-on! I work closely with my mentor Luca, who so supportive and accepting. He has been generous with his time and always provides sources when he thinks there is something for me to look into (&amp;lt;3). It has been terrifying at times, and incredibly fun.&lt;/p&gt;

&lt;p&gt;Ever since I've got the news that I am participating I've been trying on catching up with node.js, flow type etc. And there is still a lot too learn for me. In fact just after 2 weeks I can see that there are some things I am taking for granted that before where not part of my tool belt. And it is such a pleasure to work with well maintained code.&lt;/p&gt;

&lt;h3 id="whatamidoingnext"&gt;What am I doing next?&lt;/h3&gt;

&lt;p&gt;I am almost done with me issues and have started eyeing my next mission. I am also working on the add-on (I should really get on with that) which has already helped a lot to understand what I'm doing and how I should be doing it.&lt;/p&gt;

&lt;p&gt;I have been and want to continue doing some learning on the side, and thanks to &lt;a href="http://localhost:2368/outreachy-week-1-2/frecodecamp.com"&gt;freeCode Camp&lt;/a&gt;. I have a chance to work on my algorithms. &lt;br&gt;
I've also received my &lt;a href="https://events.ccc.de/congress/2016/wiki/Main_Page"&gt;33C3&lt;/a&gt; tickets, so there is something to look for. Whatever happens these are going to be very interesting 3 months.&lt;/p&gt;</content:encoded></item><item><title>Beyond Tellerland, Berlin 2016</title><description>&lt;p&gt;Me and my lovely coning partner were lucky enough to get free tickets for this year &lt;a href="https://beyondtellerrand.com/events/berlin-2016/speakers"&gt;Berlin BTconf&lt;/a&gt;. In fact we were so lucky that this is our &lt;strong&gt;3rd&lt;/strong&gt; conference this autumn.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2016/11/FullSizeRender.jpg" alt="Don't Panic"&gt;&lt;/p&gt;

&lt;h3 id="whatisit"&gt;What is it?&lt;/h3&gt;

&lt;p&gt;It is a general front-end/web/design conference. This particular instance had an absolute minimum&lt;/p&gt;</description><link>http://localhost:2368/beyond-tellerland-berlin-2016/</link><guid isPermaLink="false">26140cd0-d7e9-4657-8847-ee6af51cae12</guid><category>conferences</category><dc:creator>Elvina Valieva</dc:creator><pubDate>Sun, 13 Nov 2016 14:40:50 GMT</pubDate><media:content url="http://localhost:2368/content/images/2016/11/FullSizeRender.jpg" medium="image"/><content:encoded>&lt;img src="http://localhost:2368/content/images/2016/11/FullSizeRender.jpg" alt="Beyond Tellerland, Berlin 2016"&gt;&lt;p&gt;Me and my lovely coning partner were lucky enough to get free tickets for this year &lt;a href="https://beyondtellerrand.com/events/berlin-2016/speakers"&gt;Berlin BTconf&lt;/a&gt;. In fact we were so lucky that this is our &lt;strong&gt;3rd&lt;/strong&gt; conference this autumn.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2016/11/FullSizeRender.jpg" alt="Beyond Tellerland, Berlin 2016"&gt;&lt;/p&gt;

&lt;h3 id="whatisit"&gt;What is it?&lt;/h3&gt;

&lt;p&gt;It is a general front-end/web/design conference. This particular instance had an absolute minimum of slides with code. Do with that information what you will. Some may not be happy about overall &lt;em&gt;softness&lt;/em&gt; of talk and topics, but there are definitely ideas worth sharing and pondering on. Ever since &lt;a href="https://viewsourceconf.org/berlin-2016/"&gt;ViewSource 2016&lt;/a&gt;, where people were friendly, talks were perspective changing, food and drinks were plentiful and delicious, and last week of Berlin summer warmed the hearts and MacBooks of attendees (in coalition with free bar of course), it was clear that what makes conference good is something elusive: atmosphere, vide, whatever you want to call it. These events do not exist in the vacuum, they are perceived in their immediate historic context with sprinkles of one's personal life events. And BTconf this year happened to be a very special snapshot of the very particular way of life.&lt;/p&gt;

&lt;h3 id="goodstuff"&gt;Good Stuff&lt;/h3&gt;

&lt;p&gt;The moment &lt;a href="http://www.sachajudd.com"&gt;Sacha Judd&lt;/a&gt; made a hall full of tech folk contemplate on &lt;a href="https://gimletmedia.com/episode/6-one-direction-larry-shippers/"&gt;One Direction fandom&lt;/a&gt; it was on like donkey kong. It is rather unfair to identify this talk as the best, since there were many great ones, but this one hit us and our partner in crime Nynne directly in the feels. For most of the people on this room being a shipper, writing a fan fiction or cheesy fansite were not the direct life experiences, though they have been for is. But everyone could see the small tragedy of people doing things well and being excited about doing them not appreciating their own skill, effort and enthusiasm. Somehow this feels a lot like being a junior. &lt;a href="https://vimeo.com/channels/beyondtellerrand/190832862"&gt;This talk is wonderful&lt;/a&gt; and you should watch it. I will always remember not to be ashamed of my passion and things I've made.&lt;/p&gt;

&lt;p&gt;There were funny and hands on talks, where I've been scribbling notes constantly. Big themes across them were accessibility, taking care of people outside the bubble of european/north american high-speed paradise, and relying on simple and robust technologies (so no React love). There was funny, creative (if slightly salty) &lt;a href="https://vimeo.com/channels/beyondtellerrand/190834530"&gt;advice on writing less code&lt;/a&gt; by &lt;a href="http://www.heydonworks.com"&gt;Heydon Pickering&lt;/a&gt; (I am tempted to buy his book). Useful and very needed at the moment list of &lt;a href="https://vimeo.com/channels/beyondtellerrand/190866449"&gt;refactoring practices&lt;/a&gt;. Also notable talks on &lt;a href="https://vimeo.com/channels/beyondtellerrand/190844058"&gt;typography in interfaces&lt;/a&gt; and &lt;a href="https://vimeo.com/channels/beyondtellerrand/190871719"&gt;image optimisation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The elephant in the room was the USA election. It's best identified by a great switch from hopeful and angry &lt;a href="https://vimeo.com/channels/beyondtellerrand/190834270"&gt;talk&lt;/a&gt; by &lt;a href="https://twitter.com/monteiro"&gt;Mike Monteiro&lt;/a&gt; about taking the responsibility for what you do on the day of the election to a humane and accepting &lt;a href="https://vimeo.com/channels/beyondtellerrand/190883361"&gt;approach to data&lt;/a&gt; by &lt;a href="https://twitter.com/mulegirl"&gt;Erika Hall&lt;/a&gt; the day after. It was an unspoken framework for the event, because so many speakers were americans. Another reminder how tech world is obsessed by America. And that's time to talk about&lt;/p&gt;

&lt;h3 id="notsogoodstuff"&gt;Not So Good Stuff&lt;/h3&gt;

&lt;p&gt;All the great concepts and talks aside there is still a feeling that we just like to pat ourselves on the backs. It is pleasant to feel that we are better than the rest of the world because we are woke developers and designers, because we are aware. Sobering talks helped, but these things are still prevalent in tech and especially at tech conferences. And despite the talks about diversity, it was still majority white and male conference, though we've met some inspiring women as well.&lt;/p&gt;

&lt;h3 id="wasitgood"&gt;Was it Good?&lt;/h3&gt;

&lt;p&gt;It's all about the toilets in the end. The joke I've made about how queue to women restroom is a very good sign for a tech conference still holds true, but also the fact that most tech conference still use gendered approach to restroom is something to think about. As Micaela noted RustFest was organised by a slightly different group of people and offered an interesting activism-fuelled DIY alternative to that. I think in many ways it is a generational thing. There is a growing number of developers who see more in their craft than just a career, for whom conferences are place to exchange ideas, but they can easily become an extension of our existing echo chambers. I guess it is a good idea to take some of the advices by speakers to heart and be responsible and proactive about our lives just as much about as our code.&lt;/p&gt;</content:encoded></item><item><title>Algorithms: Pain and Pleasure</title><description>&lt;p&gt;As soon as I became serious about not sucking as a programmer anymore, I developed some learning strategies. By developed I obviously mean lifted them from other people's good ideas and pretended they were mine all along. Great strategy. Highly recommend. &lt;br&gt;
So I've been doing katas on &lt;a href="http://codewars.com"&gt;codewars&lt;/a&gt; for a&lt;/p&gt;</description><link>http://localhost:2368/algorithms-pain-and-pleasure/</link><guid isPermaLink="false">32adeb5f-46fb-4c90-823e-4b384df252c3</guid><category>javascript</category><category>online courses</category><category>cs</category><dc:creator>Elvina Valieva</dc:creator><pubDate>Sat, 15 Oct 2016 18:00:04 GMT</pubDate><content:encoded>&lt;p&gt;As soon as I became serious about not sucking as a programmer anymore, I developed some learning strategies. By developed I obviously mean lifted them from other people's good ideas and pretended they were mine all along. Great strategy. Highly recommend. &lt;br&gt;
So I've been doing katas on &lt;a href="http://codewars.com"&gt;codewars&lt;/a&gt; for a while. And since I've recently  discovered pleasures of JS I've been devoted to ranking up and finally feeling good about myself. Thats didn't last long. Pretty soon I hit the ceiling of my abilities. Bruised ego made me unhappy. Code wars is not perfect, it ranks katas in a very weird way, so someone like me can crack kata of level n in under 2 minutes and spend and hour on kata of level n-2 without any sign of relief. It became clear that I found another source of suck: I didn't know algorithms. &lt;br&gt;
Luckily I stumbled upon a &lt;a href="https://medium.freecodecamp.com/the-data-dont-lie-here-are-the-50-best-free-online-university-courses-of-all-time-b2d9a64edfac?source=user_profile---------6-"&gt;medium post on best ranked online courses&lt;/a&gt; (wow online courses people really love python). So there is was &lt;a href="https://www.class-central.com/mooc/374/coursera-algorithms-design-and-analysis-part-1"&gt;&lt;strong&gt;Algorithms: Design and Analysis, Part 1&lt;/strong&gt;&lt;/a&gt; conveniently starting in just couple of days. So you can guess what happened next&lt;/p&gt;

&lt;h2 id="impression"&gt;Impression  &lt;/h2&gt;

&lt;p&gt;First impression is just how much i've forgotten math. It is a pretty strong impression so it took me two weeks to formulate the rest of my thoughts. &lt;br&gt;
It's pretty wonderful how just a small injection of algorithms made me think very differently. I use this new tool to analyse other people's code, to construct my own and it is a fun brain exercise even if you don't use algorithms for work. &lt;br&gt;
I am yet to experience all the fruits of this course, and I believe it will keep on giving for the next 5 week (and through its second part). &lt;br&gt;
The best part about algorithms is the feeling of satisfaction. It is very similar to how it felt the very first time I wrote a recursion. It was such a small elegant thing. Mmmm, wonderful. &lt;/p&gt;

&lt;h2 id="somecoursecritique"&gt;Some course critique  &lt;/h2&gt;

&lt;p&gt;Tim Roughgarden is lovely, he has a great voice for the online-course, pleasant but still keeps you awake. He speaks relatively fast, so I did not speed up any videos. In fact combined with the workload (several hours of video a month) this course maybe a little bit too demanding for some people. &lt;br&gt;
I feel like a lot of time I don't grasp a subject fully because of my rusty math skills. So far I managed to catch up, but maybe I will exhaust my math resources at some point. &lt;br&gt;
I'd say this course is not complete beginner friendly. There is code to none introduction to many important concepts, so for people with no programming or math experience it would be too much. &lt;br&gt;
I'd also love to have elaborate reading material section or a reading list recommendation outside to mentioning of a couple of books. That was always the best part of studies for me, one can stop at the line or go as far as they want to. &lt;br&gt;
Also programming assignments suck. This week one requires submitting calculating number of operations (no matter what language one uses), last week's required submitting a resulting number. I wish they just provided a code editor for some popular languages instead. &lt;br&gt;
Despite all that I'd still recommend the course. Algorithms intimidated me. CLRS looked way to menacing. This course requires some work and compromises, but it does it job and opens the student to a new way of thinking.&lt;/p&gt;

&lt;h2 id="next"&gt;Next?  &lt;/h2&gt;

&lt;p&gt;Thanks to this course I'm reminded to pick up my code complete reading again. And well, after that I need to look for a mooc on math.&lt;/p&gt;</content:encoded></item><item><title>Lifelong Learning</title><description>&lt;p&gt;So there was I sitting in the room full of developers, and the only person standing up was telling us how important it is to have presence online. "Bummer" - I though to myself, remembering how I last updated any of my social networks about 2 years ago. Then I&lt;/p&gt;</description><link>http://localhost:2368/lifelong-learning/</link><guid isPermaLink="false">71d548ab-9b01-413a-9081-f9c0a2882432</guid><dc:creator>Elvina Valieva</dc:creator><pubDate>Tue, 27 Sep 2016 14:49:49 GMT</pubDate><content:encoded>&lt;p&gt;So there was I sitting in the room full of developers, and the only person standing up was telling us how important it is to have presence online. "Bummer" - I though to myself, remembering how I last updated any of my social networks about 2 years ago. Then I remembered how one very helpful &lt;a href="http://chimera.labs.oreilly.com/books/1234000001813/index.html"&gt;book&lt;/a&gt; recommended maintaining a blog to learn and get better. That sound helpful, I though to myself and went on instilling ghost. Here is my first post, which encapsulates a very postmodernist approach of writing about writing the first post. I hope to maintain this mischievous borgesian approach to the rest of this blog as well. &lt;/p&gt;</content:encoded></item></channel></rss>